import os

"""
Automatically create Modules for each activation function.
"""

# autogenerate a file containing all activation functions as modules

file = "../parametricmatrixmodels/modules/_autogenerated_activationfuncs.py"

if os.path.exists(file):
    raise FileExistsError(
        f"File {file} already exists. Please remove it before running this"
        " script."
    )

imports = ["import jax", "from .activationbase import ActivationBase"]

funcs = {
    "ReLU": "jax.nn.relu",
    "ReLU6": "jax.nn.relu6",
    "Sigmoid": "jax.nn.sigmoid",
    "Softplus": "jax.nn.softplus",
    "SparsePlus": "jax.nn.sparse_plus",
    "SparseSigmoid": "jax.nn.sparse_sigmoid",
    "SoftSign": "jax.nn.soft_sign",
    "SiLU": "jax.nn.silu",
    "Swish": "jax.nn.swish",
    "LogSigmoid": "jax.nn.log_sigmoid",
    "LeakyReLU": "jax.nn.leaky_relu",
    "HardSigmoid": "jax.nn.hard_sigmoid",
    "HardSiLU": "jax.nn.hard_silu",
    "HardSwish": "jax.nn.hard_swish",
    "HardTanh": "jax.nn.hard_tanh",
    "ELU": "jax.nn.elu",
    "CELU": "jax.nn.celu",
    "SELU": "jax.nn.selu",
    "GELU": "jax.nn.gelu",
    "GLU": "jax.nn.glu",
    "SquarePlus": "jax.nn.squareplus",
    "Mish": "jax.nn.mish",
    "Identity": "jax.nn.identity",
    "Softmax": "jax.nn.softmax",
    "LogSoftmax": "jax.nn.log_softmax",
    "Tanh": "jax.numpy.tanh",
    "LogSumExp": "jax.nn.logsumexp",
    "Standardize": "jax.nn.standardize",
    "OneHot": "jax.nn.one_hot",
    # "DotProductAttention": "jax.nn.dot_product_attention",
    # "ScaledMatmul": "jax.nn.scaled_matmul",
    # "ScaledDotGeneral": "jax.nn.scaled_dot_general",
}


def create_module(name: str, func: str) -> str:
    """
    Create a module class for the activation function.

    Parameters
    ----------
    name : str
        Name of the activation function.
    func : str
        Function to be used for the activation.

    Returns
    -------
    str
        The class definition as a string.
    """
    return f"""
class {name}(ActivationBase):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

    def name(self) -> str:
        return "{name}"

    def func(self, x: jax.numpy.ndarray) -> jax.numpy.ndarray:
        return {func}(x, *self.args, **self.kwargs)
"""


file_content = "\n".join(imports) + "\n\n"

for name, func in funcs.items():
    file_content += create_module(name, func) + "\n"

file_content += "\n# This file is autogenerated. Do not edit manually.\n"

with open(file, "w") as f:
    f.write(file_content)
